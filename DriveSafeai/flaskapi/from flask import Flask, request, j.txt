from flask import Flask, request, jsonify
import pandas as pd
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

app = Flask(__name__)

# === Train Model on Startup ===
df = pd.read_csv("data/synthetic_driving_data_by_trip.csv.csv")

features = ["speed", "rpm", "acceleration", "brake", "throttle_position",
            "engine_temperature", "system_voltage", "engine_load_value", "distance_travelled"]

X = df[features]
y = df["drive_score"]

# Optional: split for evaluation
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = lgb.LGBMRegressor()
model.fit(X_train, y_train)

print("âœ… Model trained successfully.")

# Optional evaluation
preds = model.predict(X_test)
print("ðŸ“Š MSE on test set:", round(mean_squared_error(y_test, preds), 2))


# === Single Row Prediction ===
@app.route("/predict", methods=["POST"])
def predict_drive_score():
    data = request.get_json()
    df_input = pd.DataFrame([data])
    score = float(model.predict(df_input)[0])
    return jsonify({"drive_score": round(score, 2)})

# === Batch Prediction Endpoint ===
@app.route("/predict/batch", methods=["POST"])
def predict_drive_score_batch():
    data = request.get_json()
    df_input = pd.DataFrame(data)

    # Validate required features
    missing = [col for col in features if col not in df_input.columns]
    if missing:
        return jsonify({"error": f"Missing columns: {missing}"}), 400

    # Make predictions for each row
    predictions = model.predict(df_input)
    individual_scores = [round(float(score), 2) for score in predictions]
    mean_score = round(float(predictions.mean()), 2)

    return jsonify({
        "individual_scores": individual_scores,
        "mean_score": mean_score,
        "rows_processed": len(df_input)
    })
# === CSV Upload Endpoint ===
@app.route("/upload-csv", methods=["POST"])
def upload_csv_and_predict():
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["file"]
    if not file.filename.endswith(".csv"):
        return jsonify({"error": "Only CSV files are allowed"}), 400

    df_input = pd.read_csv(file)

    # Check if all required columns exist
    missing = [col for col in features if col not in df_input.columns]
    if missing:
        return jsonify({"error": f"Missing columns: {missing}"}), 400

    prediction = model.predict(df_input)
    avg_score = round(prediction.mean(), 2)

    return jsonify({
        "drive_score": avg_score,
        "rows_processed": len(df_input)
    })

@app.route("/", methods=["GET"])
def index():
    return jsonify({
        "name": "Drive Score Prediction API",
        "version": "1.0",
        "endpoints": {
            "/predict": "POST - Single prediction",
            "/predict/batch": "POST - Batch predictions",
            "/upload-csv": "POST - CSV file predictions"
        }
    })


if __name__ == "__main__":
    app.run(port=5000, debug=True)
